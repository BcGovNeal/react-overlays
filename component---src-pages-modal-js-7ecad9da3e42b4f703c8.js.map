{"version":3,"sources":["webpack:///./src/pages/modal.js","webpack:///./src/examples/Modal.js"],"names":["ModalPage","location","ModalMetadata","data","className","dangerouslySetInnerHTML","__html","description","childMarkdownRemark","html","codeText","ModalSource","component","metadata","pageQuery","module","exports"],"mappings":"2FACA,8HA6BeA,UApBf,YAA2D,IAAtCC,EAAqC,EAArCA,SAAkBC,EAAmB,EAA3BC,KAAQD,cACrC,OACE,kBAAC,IAAD,CAAMD,SAAUA,GACd,wBAAIG,UAAU,eACZ,kBAAC,IAAD,eAEF,uBACEC,wBAAyB,CACvBC,OAAQJ,EAAcK,YAAYC,oBAAoBC,QAG1D,kBAAC,IAAD,CAAYC,SAAUC,MACtB,qCACA,kBAAC,IAAD,CAAWC,UAAU,QAAQC,SAAUX,MAStC,IAAMY,EAAS,c,mBChCtBC,EAAOC,QAAU","file":"component---src-pages-modal-js-7ecad9da3e42b4f703c8.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport Anchor from '../components/Anchor';\nimport Page from '../components/Page';\nimport Playground from '../components/Playground';\nimport PropTable from '../components/PropTable';\nimport ModalSource from '../examples/Modal';\n\nconst propTypes = {};\n\nfunction ModalPage({ location, data: { ModalMetadata } }) {\n  return (\n    <Page location={location}>\n      <h2 className=\"page-header\">\n        <Anchor>Modal</Anchor>\n      </h2>\n      <p\n        dangerouslySetInnerHTML={{\n          __html: ModalMetadata.description.childMarkdownRemark.html,\n        }}\n      />\n      <Playground codeText={ModalSource} />\n      <h3>Props</h3>\n      <PropTable component=\"Modal\" metadata={ModalMetadata} />\n    </Page>\n  );\n}\n\nModalPage.propTypes = propTypes;\n\nexport default ModalPage;\n\nexport const pageQuery = graphql`\n  query ModalQuery {\n    ModalMetadata: componentMetadata(displayName: { eq: \"Modal\" }) {\n      ...PropTable_metadata\n    }\n  }\n`;\n","module.exports = \"let rand = () => Math.floor(Math.random() * 20) - 10;\\n\\nconst Backdrop = styled('div')`\\n  position: fixed;\\n  z-index: 1040;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  background-color: #000;\\n  opacity: 0.5;\\n`;\\n\\n// we use some pseudo random coords so nested modals\\n// don't sit right on top of each other.\\nconst RandomlyPositionedModal = styled(Modal)`\\n  position: fixed;\\n  width: 400px;\\n  z-index: 1040;\\n  top: ${() => 50 + rand()}%;\\n  left: ${() => 50 + rand()}%;\\n  border: 1px solid #e5e5e5;\\n  background-color: white;\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\\n  padding: 20px;\\n`;\\n\\nfunction ModalExample() {\\n  const [show, setShow] = useState(false);\\n\\n  const renderBackdrop = props => <Backdrop {...props} />;\\n\\n  return (\\n    <div className=\\\"modal-example\\\">\\n      <button\\n        type=\\\"button\\\"\\n        className=\\\"btn btn-primary mb-4\\\"\\n        onClick={() => setShow(true)}\\n      >\\n        Open Modal\\n      </button>\\n      <p>Click to get the full Modal experience!</p>\\n\\n      <RandomlyPositionedModal\\n        show={show}\\n        onHide={() => setShow(false)}\\n        renderBackdrop={renderBackdrop}\\n        aria-labelledby=\\\"modal-label\\\"\\n      >\\n        <div>\\n          <h4 id=\\\"modal-label\\\">Text in a modal</h4>\\n          <p>\\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\\n          </p>\\n          <ModalExample />\\n        </div>\\n      </RandomlyPositionedModal>\\n    </div>\\n  );\\n}\\n\\nrender(<ModalExample />);\\n\""],"sourceRoot":""}