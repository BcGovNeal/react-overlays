{"version":3,"sources":["webpack:///./src/pages/overlay.js","webpack:///./src/examples/Overlay.js"],"names":["OverlayPage","location","OverlayMetadata","data","className","dangerouslySetInnerHTML","__html","description","childMarkdownRemark","html","codeText","OverlaySource","component","metadata","pageQuery","module","exports"],"mappings":"2FACA,8HA4BeA,UAnBf,YAA+D,IAAxCC,EAAuC,EAAvCA,SAAkBC,EAAqB,EAA7BC,KAAQD,gBACvC,OACE,kBAAC,IAAD,CAAMD,SAAUA,GACd,wBAAIG,UAAU,eACZ,kBAAC,IAAD,iBAEF,uBACEC,wBAAyB,CACvBC,OAAQJ,EAAgBK,YAAYC,oBAAoBC,QAG5D,kBAAC,IAAD,CAAYC,SAAUC,MACtB,kBAAC,IAAD,CAAWC,UAAU,UAAUC,SAAUX,MASxC,IAAMY,EAAS,c,mBC/BtBC,EAAOC,QAAU","file":"component---src-pages-overlay-js-b4514bb9ddfb209213d0.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport Anchor from '../components/Anchor';\nimport Page from '../components/Page';\nimport Playground from '../components/Playground';\nimport PropTable from '../components/PropTable';\nimport OverlaySource from '../examples/Overlay';\n\nconst propTypes = {};\n\nfunction OverlayPage({ location, data: { OverlayMetadata } }) {\n  return (\n    <Page location={location}>\n      <h2 className=\"page-header\">\n        <Anchor>Overlay</Anchor>\n      </h2>\n      <p\n        dangerouslySetInnerHTML={{\n          __html: OverlayMetadata.description.childMarkdownRemark.html,\n        }}\n      />\n      <Playground codeText={OverlaySource} />\n      <PropTable component=\"Overlay\" metadata={OverlayMetadata} />\n    </Page>\n  );\n}\n\nOverlayPage.propTypes = propTypes;\n\nexport default OverlayPage;\n\nexport const pageQuery = graphql`\n  query OverlayQuery {\n    OverlayMetadata: componentMetadata(displayName: { eq: \"Overlay\" }) {\n      ...PropTable_metadata\n    }\n  }\n`;\n","module.exports = \"// Styles mostly from Bootstrap.\\n\\nconst Tooltip = styled('div')`\\n  position: absolute;\\n  padding: 0 5px;\\n\\n  ${p => {\\n    switch (p.placement) {\\n      case 'left':\\n        return css`\\n          margin-left: -3px;\\n          padding: 0 5px;\\n        `;\\n      case 'right':\\n        return css`\\n          margin-left: 3px;\\n          padding: 0 5px;\\n        `;\\n      case 'top':\\n        return css`\\n          margin-top: -3px;\\n          padding: 5px 0;\\n        `;\\n      case 'bottom':\\n        return css`\\n          margin-bottom: 3px;\\n          padding: 5px 0;\\n        `;\\n      default:\\n        return '';\\n    }\\n  }}\\n`;\\n\\nconst Arrow = styled('div')`\\n  position: absolute;\\n  width: 0;\\n  height: 0;\\n  border-style: solid;\\n  opacity: 0.75;\\n\\n  ${p => {\\n    switch (p.placement) {\\n      case 'left':\\n        return css`\\n          right: 0;\\n          border-width: 5px 0 5px 5px;\\n          border-color: transparent transparent transparent #000;\\n        `;\\n      case 'right':\\n        return css`\\n          left: 0;\\n          border-width: 5px 5px 5px 0;\\n          border-color: transparent #232323 transparent transparent;\\n        `;\\n      case 'top':\\n        return css`\\n          bottom: 0;\\n          border-width: 5px 5px 0;\\n          border-color: #232323 transparent transparent transparent;\\n        `;\\n      case 'bottom':\\n        return css`\\n          top: 0;\\n          border-width: 0 5px 5px;\\n          border-color: transparent transparent #232323 transparent;\\n        `;\\n      default:\\n        return '';\\n    }\\n  }}\\n`;\\n\\nconst Body = styled('div')`\\n  padding: 3px 8px;\\n  color: #fff;\\n  text-align: center;\\n  border-radius: 3px;\\n  background-color: #000;\\n  opacity: 0.75;\\n`;\\n\\nconst PLACEMENTS = ['left', 'top', 'right', 'bottom'];\\n\\nconst initialSstate = {\\n  show: false,\\n  placement: null\\n};\\n\\nfunction reducer(state, [type, payload]) {\\n  switch (type) {\\n    case 'placement':\\n      return { show: !!payload, placement: payload };\\n    case 'hide':\\n      return { ...state, show: false, placement: null };\\n    default:\\n      return state;\\n  }\\n}\\n\\nfunction OverlayExample() {\\n  const [{ show, placement }, dispatch] = useReducer(reducer, initialSstate);\\n  const triggerRef = useRef(null);\\n  const containerRef = useRef(null);\\n\\n  const handleClick = () => {\\n    const nextPlacement = PLACEMENTS[PLACEMENTS.indexOf(placement) + 1];\\n\\n    dispatch(['placement', nextPlacement]);\\n  };\\n\\n  return (\\n    <div className=\\\"overlay-example\\\" ref={containerRef}>\\n      <button\\n        type=\\\"button\\\"\\n        className=\\\"btn btn-primary\\\"\\n        id=\\\"overlay-toggle\\\"\\n        ref={triggerRef}\\n        onClick={handleClick}\\n      >\\n        I am an Overlay target\\n      </button>\\n      <p>Keep clicking to see the placement change.</p>\\n\\n      <Overlay\\n        show={show}\\n        rootClose\\n        onHide={() => dispatch('hide')}\\n        placement={placement}\\n        container={containerRef}\\n        target={triggerRef}\\n      >\\n        {({ props, arrowProps, placement }) => (\\n          <Tooltip {...props} placement={placement}>\\n            <Arrow\\n              {...arrowProps}\\n              placement={placement}\\n              style={arrowProps.style}\\n            />\\n            <Body>\\n              I&rsquo;m placed to the <strong>{placement}</strong>\\n            </Body>\\n          </Tooltip>\\n        )}\\n      </Overlay>\\n    </div>\\n  );\\n}\\n\\nrender(<OverlayExample />);\\n\""],"sourceRoot":""}