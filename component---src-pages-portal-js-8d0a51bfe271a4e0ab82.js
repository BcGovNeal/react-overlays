(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{1468:function(n,e,a){"use strict";a.r(e),a.d(e,"pageQuery",function(){return u});var t=a(4),r=a.n(t),o=a(1459),l=a(1460),c=a(1461),s=a(1462),d=a(1477),i=a.n(d);e.default=function(n){var e=n.location,a=n.data.PortalMetadata;return r.a.createElement(l.a,{location:e},r.a.createElement("h2",{className:"page-header"},r.a.createElement(o.a,null,"Portals")),r.a.createElement("p",{dangerouslySetInnerHTML:{__html:a.description.childMarkdownRemark.html}}),r.a.createElement(c.a,{codeText:i.a}),r.a.createElement(s.a,{component:"Portal",metadata:a}))};var u="840202436"},1477:function(n,e){n.exports='function PortalExample() {\n  const [show, setShow] = useState(false);\n  const containerRef = useRef(null);\n\n  let child = <span>But I actually render here!</span>;\n\n  return (\n    <div className="portal-example">\n      <button\n        type="button"\n        className="btn btn-primary"\n        onClick={() => setShow(true)}\n      >\n        Render Child\n      </button>\n      <div className="card card-body mb-4">\n        <span>It looks like I will render in here.</span>\n\n        <Portal container={containerRef}>{show && child}</Portal>\n      </div>\n\n      <div className="card card-body" ref={containerRef} />\n    </div>\n  );\n}\n\nrender(<PortalExample />);\n'}}]);
//# sourceMappingURL=component---src-pages-portal-js-8d0a51bfe271a4e0ab82.js.map