{"version":3,"sources":["webpack:///./src/pages/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+QAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,mBADR,mBAGA,mBAAQ,CACN,GAAM,gBADR,gBAGA,yBAAK,oCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,iCAIL,uCACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8BAIL,mBAAQ,CACN,GAAM,SADR,SAGA,6FACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sDAIL,mBAAQ,CACN,GAAM,WADR,WAGA,mLACuD,oBAAIA,WAAW,KAAf,QADvD,2FAE6C,wBAAQA,WAAW,KAAnB,YAF7C,8KAI2D,iCAAGA,WAAW,KAAQ,CAC7E,KAAQ,uDAD+C,mBAJ3D,KAOA,8DAA2C,4BAAYA,WAAW,KAAvB,SAA3C,0FACsC,4BAAYA,WAAW,KAAvB,YADtC,8EAEsC,4BAAYA,WAAW,KAAvB,SAFtC,YAEoG,4BAAYA,WAAW,KAAvB,oBAFpG,wGASJJ,EAAWK,gBAAiB","file":"component---src-pages-index-mdx-110fb7f6eb755422dc6d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jquense/src/react-overlays/www/node_modules/@docpocalypse/gatsby-theme/src/components/PageLayout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h1>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm install react-overlays\n`}</code></pre>\n    <p>{`Or with yarn`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`yarn add react-overlays\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Components can be imported from the main package or directly like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Dropdown from 'react-overlays/Dropdown';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"styling\"\n    }}>{`Styling`}</h2>\n    <p>{`React Overlays is a toolkit for creating functional overlays, tooltips, modals, and dropdowns.\nIt is not a UI framework but is meant to be incorporated `}<em parentName=\"p\">{`into`}</em>{` frameworks. To make those integrations\npossible, React Overlays is style-agnostic and `}<strong parentName=\"p\">{`does not`}</strong>{` come with any CSS.\nYou should provide your own styles, and the documentation provides some simple examples\nfor how to do that. For more complex integrations, check out `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-bootstrap/react-bootstrap\"\n      }}>{`React Bootstrap`}</a>{`.`}</p>\n    <p>{`There are a few places where inline `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`s are applied, however. They are functionally\nrequired and very minimal. Specifically `}<inlineCode parentName=\"p\">{`PopperJs`}</inlineCode>{` injects it's own styles in order\nto position overlays and dropdowns, and `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` applies `}<inlineCode parentName=\"p\">{`overflow: hidden`}</inlineCode>{` to the\ndocument body. These can technically be overridden but it's very unlikely to be\nrequired.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}