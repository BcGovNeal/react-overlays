{"componentChunkName":"component---src-pages-dropdown-copy-js","path":"/dropdown copy/","webpackCompilationHash":"","result":{"data":{"DropdownMetadata":{"composes":null,"displayName":"ReactOverlaysDropdown","description":{"childMarkdownRemark":{"html":"<p><code>Dropdown</code> is set of structural components for building, accessible dropdown menus with close-on-click,\nkeyboard navigation, and correct focus handling. As with all the react-overlay's\ncomponents its BYOS (bring your own styles). Dropdown is primarily\nbuilt from three base components, you should compose to build your Dropdowns.</p>\n<ul>\n<li><code>Dropdown</code>, which wraps the menu and toggle, and handles keyboard navigation</li>\n<li><code>Dropdown.Toggle</code> generally a button that triggers the menu opening</li>\n<li><code>Dropdown.Menu</code> The overlaid, menu, positioned to the toggle with PopperJs</li>\n</ul>"}},"props":[{"name":"children","doclets":[{"tag":"type","value":"{Function ({\n  props: {\n    onKeyDown: (SyntheticEvent) => void,\n  },\n}) => React.Element}"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A render prop that returns the root dropdown element. The <code>props</code>\nargument should spread through to an element containing <em>both</em> the\nmenu and toggle in order to handle keyboard events for focus management.</p>"}},"required":true,"type":{"name":"Function ({\n  props: {\n    onKeyDown: (SyntheticEvent) => void,\n  },\n}) => React.Element","value":null,"raw":null}},{"name":"drop","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Determines the direction and location of the Menu in relation to it's Toggle.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'up'","computed":false},{"value":"'left'","computed":false},{"value":"'right'","computed":false},{"value":"'down'","computed":false}],"raw":null}},{"name":"focusFirstItemOnShow","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Controls the focus behavior for when the Dropdown is opened. Set to\n<code>true</code> to always focus the first menu item, <code>keyboard</code> to focus only when\nnavigating via the keyboard, or <code>false</code> to disable completely</p>\n<p>The Default behavior is <code>false</code> <strong>unless</strong> the Menu has a <code>role=\"menu\"</code>\nwhere it will default to <code>keyboard</code> to match the recommended <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton\">ARIA Authoring practices</a>.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"false","computed":false},{"value":"true","computed":false},{"value":"'keyboard'","computed":false}],"raw":null}},{"name":"itemSelector","doclets":[],"defaultValue":{"value":"'* > *'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A css slector string that will return <strong>focusable</strong> menu items.\nSelectors should be relative to the menu component:\ne.g. <code>> li:not('.disabled')</code></p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"alignEnd","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is <code>top-start</code> or <code>bottom-start</code>.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"show","doclets":[{"tag":"controllable","value":"onToggle"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether or not the Dropdown is visible.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"defaultShow","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Sets the initial show position of the Dropdown.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onToggle","doclets":[{"tag":"controllable","value":"show"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the Dropdown wishes to change visibility. Called with the requested\n<code>show</code> value, the DOM event, and the source that fired it: <code>'click'</code>,<code>'keydown'</code>,<code>'rootClose'</code>, or <code>'select'</code>.</p>\n<pre><code class=\"language-js\">function(\n  isOpen: boolean,\n  event: SyntheticEvent,\n): void\n</code></pre>"}},"required":false,"type":{"name":"func","value":null,"raw":null}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}