{"componentChunkName":"component---src-pages-modal-js","path":"/modal/","webpackCompilationHash":"0173565099782c9424d4","result":{"data":{"ModalMetadata":{"composes":null,"displayName":"Modal","description":{"childMarkdownRemark":{"html":"<p>Love them or hate them, <code>&#x3C;Modal /></code> provides a solid foundation for creating dialogs, lightboxes, or whatever else.\nThe Modal component renders its <code>children</code> node in front of a backdrop component.</p>\n<p>The Modal offers a few helpful features over using just a <code>&#x3C;Portal/></code> component and some styles:</p>\n<ul>\n<li>Manages dialog stacking when one-at-a-time just isn't enough.</li>\n<li>Creates a backdrop, for disabling interaction below the modal.</li>\n<li>It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.</li>\n<li>It disables scrolling of the page content while open.</li>\n<li>Adds the appropriate ARIA roles are automatically.</li>\n<li>Easily pluggable animations via a <code>&#x3C;Transition/></code> component.</li>\n</ul>\n<p>Note that, in the same way the backdrop element prevents users from clicking or interacting\nwith the page content underneath the Modal, Screen readers also need to be signaled to not to\ninteract with page content while the Modal is open. To do this, we use a common technique of applying\nthe <code>aria-hidden='true'</code> attribute to the non-Modal elements in the Modal <code>container</code>. This means that for\na Modal to be truly modal, it should have a <code>container</code> that is <em>outside</em> your app's\nReact hierarchy (such as the default: document.body).</p>"}},"props":[{"name":"show","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Set the visibility of the Modal</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"container","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A DOM element, a <code>ref</code> to an element, or function that returns either. The Modal is appended to it's <code>container</code> element.</p>\n<p>For the sake of assistive technologies, the container should usually be the document body, so that the rest of the\npage content can be placed behind a virtual backdrop as well as a visual one.</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"onShow","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the Modal is opening.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onHide","doclets":[],"defaultValue":{"value":"() => {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A callback fired when either the backdrop is clicked, or the escape key is pressed.</p>\n<p>The <code>onHide</code> callback only signals intent from the Modal,\nyou must actually set the <code>show</code> prop to <code>false</code> for the Modal to close.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"backdrop","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Include a backdrop component.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"bool"},{"name":"enum","value":[{"value":"'static'","computed":false}]}],"raw":null}},{"name":"renderDialog","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A function that returns the dialog component. Useful for custom\nrendering. <strong>Note:</strong> the component should make sure to apply the provided ref.</p>\n<pre><code class=\"language-js\"> renderDialog={props => &#x3C;MyDialog {...props} />}\n</code></pre>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"renderBackdrop","doclets":[],"defaultValue":{"value":"props => <div {...props} />","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A function that returns a backdrop component. Useful for custom\nbackdrop rendering.</p>\n<pre><code class=\"language-js\"> renderBackdrop={props => &#x3C;MyBackdrop {...props} />}\n</code></pre>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEscapeKeyDown","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the escape key, if specified in <code>keyboard</code>, is pressed.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onBackdropClick","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the backdrop, if specified, is clicked.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"containerClassName","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A css class or set of classes applied to the modal container when the modal is open,\nand removed when it is closed.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"keyboard","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Close the modal when escape key is pressed</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"transition","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code>react-transition-group@2.0.0</code> <code>&#x3C;Transition/></code> component used\nto control animations for the dialog component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}},{"name":"backdropTransition","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code>react-transition-group@2.0.0</code> <code>&#x3C;Transition/></code> component used\nto control animations for the backdrop components.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}},{"name":"autoFocus","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>When <code>true</code> The modal will automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes. This also\nworks correctly with any Modal children that have the <code>autoFocus</code> prop.</p>\n<p>Generally this should never be set to <code>false</code> as it makes the Modal less\naccessible to assistive technologies, like screen readers.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"enforceFocus","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>When <code>true</code> The modal will prevent focus from leaving the Modal while open.</p>\n<p>Generally this should never be set to <code>false</code> as it makes the Modal less\naccessible to assistive technologies, like screen readers.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"restoreFocus","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>When <code>true</code> The modal will restore focus to previously focused element once\nmodal is hidden</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"restoreFocusOptions","doclets":[{"tag":"link","value":" https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Options passed to focus function when <code>restoreFocus</code> is set to <code>true</code></p>"}},"required":false,"type":{"name":"shape","value":{"preventScroll":{"name":"bool","required":false}},"raw":null}},{"name":"onEnter","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the Modal transitions in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntering","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired as the Modal begins to transition in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntered","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the Modal finishes transitioning in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExit","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired right before the Modal transitions out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExiting","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired as the Modal begins to transition out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExited","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the Modal finishes transitioning out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"manager","doclets":[],"defaultValue":{"value":"new ModalManager()","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A ModalManager instance used to track and manage the state of open\nModals. Useful when customizing how modals interact within a container</p>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"role","doclets":[],"defaultValue":{"value":"'dialog'","computed":false},"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":null}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}