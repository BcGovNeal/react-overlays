(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{1464:function(n,o,e){"use strict";e.r(o),e.d(o,"pageQuery",function(){return u});var t=e(4),l=e.n(t),r=e(1459),a=e(1460),p=e(1461),d=e(1462),s=e(1474),i=e.n(s);o.default=function(n){var o=n.location,e=n.data,t=e.DropdownMetadata,s=e.DropdownMenuMetadata,u=e.DropdownToggleMetadata;return l.a.createElement(a.a,{location:o},l.a.createElement("h2",{className:"page-header"},l.a.createElement(r.a,null,"Dropdown")),l.a.createElement("p",{dangerouslySetInnerHTML:{__html:t.description.childMarkdownRemark.html}}),l.a.createElement(p.a,{codeText:i.a}),l.a.createElement(d.a,{component:"Dropdown",metadata:t}),l.a.createElement(d.a,{title:"Dropdown.Menu",component:"ReactOverlaysDropdownMenu",metadata:s}),l.a.createElement(d.a,{title:"Dropdown.Toggle",component:"ReactOverlaysDropdownToggle",metadata:u}))};var u="3272267353"},1474:function(n,o){n.exports='const MenuContainer = styled(\'ButtonToolbar\')`\n  display: ${p => (p.show ? \'flex\' : \'none\')};\n  min-width: 150px;\n  position: absolute;\n  flex-direction: column;\n  border: 1px solid #e5e5e5;\n  background-color: white;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n  padding: 20px;\n`;\n\nconst Menu = ({ role }) => {\n  const { show, onClose, props } = useDropdownMenu({ flip: true });\n  return (\n    <MenuContainer {...props} role={role} show={show}>\n      <button type="button" onClick={onClose} style={{ textAlign: \'left\' }}>\n        Item 1\n      </button>\n      <button type="button" onClick={onClose} style={{ textAlign: \'left\' }}>\n        Item 2\n      </button>\n    </MenuContainer>\n  );\n};\n\nconst Toggle = ({ id, children }) => {\n  const [props, { show, toggle }] = useDropdownToggle();\n  return (\n    <button\n      type="button"\n      className="btn btn-primary"\n      id={id}\n      {...props}\n      onClick={toggle}\n    >\n      {children}\n    </button>\n  );\n};\n\nconst DropdownButton = ({ show, onToggle, drop, alignEnd, title, role }) => (\n  <Dropdown\n    show={show}\n    onToggle={onToggle}\n    drop={drop}\n    alignEnd={alignEnd}\n    itemSelector="button:not(:disabled)"\n  >\n    {({ props }) => (\n      <div {...props} className="position-relative d-inline-block">\n        <Toggle id="example-toggle">{title}</Toggle>\n        <Menu role={role} />\n      </div>\n    )}\n  </Dropdown>\n);\n\nconst ButtonToolbar = styled(\'div\')`\n  & > * + * {\n    margin-left: 12px;\n  }\n`;\n\nfunction DropdownExample() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <ButtonToolbar className="dropdown-example">\n      <DropdownButton\n        show={show}\n        onToggle={nextShow => setShow(nextShow)}\n        title={`${show ? \'Close\' : \'Open\'} Dropdown`}\n      />\n      <DropdownButton alignEnd title="Align right" />\n\n      <DropdownButton drop="up" title="Drop up" />\n      <DropdownButton role="menu" title="Role \'menu\'" />\n    </ButtonToolbar>\n  );\n}\n\nrender(<DropdownExample />);\n'}}]);
//# sourceMappingURL=component---src-pages-dropdown-js-8fc5db49b882865d83c7.js.map