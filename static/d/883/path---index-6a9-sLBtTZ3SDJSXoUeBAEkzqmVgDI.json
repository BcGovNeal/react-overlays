{"data":{"ModalMetadata":{"composes":null,"displayName":"Modal","description":{"childMarkdownRemark":{"html":"<p>Love them or hate them, <code>&#x3C;Modal /></code> provides a solid foundation for creating dialogs, lightboxes, or whatever else.\nThe Modal component renders its <code>children</code> node in front of a backdrop component.</p>\n<p>The Modal offers a few helpful features over using just a <code>&#x3C;Portal/></code> component and some styles:</p>\n<ul>\n<li>Manages dialog stacking when one-at-a-time just isn't enough.</li>\n<li>Creates a backdrop, for disabling interaction below the modal.</li>\n<li>It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.</li>\n<li>It disables scrolling of the page content while open.</li>\n<li>Adds the appropriate ARIA roles are automatically.</li>\n<li>Easily pluggable animations via a <code>&#x3C;Transition/></code> component.</li>\n</ul>\n<p>Note that, in the same way the backdrop element prevents users from clicking or interacting\nwith the page content underneath the Modal, Screen readers also need to be signaled to not to\ninteract with page content while the Modal is open. To do this, we use a common technique of applying\nthe <code>aria-hidden='true'</code> attribute to the non-Modal elements in the Modal <code>container</code>. This means that for\na Modal to be truly modal, it should have a <code>container</code> that is <em>outside</em> your app's\nReact hierarchy (such as the default: document.body).</p>"}},"props":[{"name":"show","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Set the visibility of the Modal</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"container","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A DOM element, a <code>ref</code> to an element, or function that returns either. The Modal is appended to it's <code>container</code> element.</p>\n<p>For the sake of assistive technologies, the container should usually be the document body, so that the rest of the\npage content can be placed behind a virtual backdrop as well as a visual one.</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"onShow","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the Modal is opening.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onHide","doclets":[],"defaultValue":{"value":"() => {}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A callback fired when either the backdrop is clicked, or the escape key is pressed.</p>\n<p>The <code>onHide</code> callback only signals intent from the Modal,\nyou must actually set the <code>show</code> prop to <code>false</code> for the Modal to close.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"backdrop","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Include a backdrop component.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"bool"},{"name":"enum","value":[{"value":"'static'","computed":false}]}],"raw":null}},{"name":"renderDialog","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A function that returns the dialog component. Useful for custom\nrendering. <strong>Note:</strong> the component should make sure to apply the provided ref.</p>\n<pre><code class=\"language-js\"> renderDialog={props => &#x3C;MyDialog {...props} />}\n</code></pre>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"renderBackdrop","doclets":[],"defaultValue":{"value":"props => <div {...props} />","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A function that returns a backdrop component. Useful for custom\nbackdrop rendering.</p>\n<pre><code class=\"language-js\"> renderBackdrop={props => &#x3C;MyBackdrop {...props} />}\n</code></pre>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEscapeKeyDown","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the escape key, if specified in <code>keyboard</code>, is pressed.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onBackdropClick","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the backdrop, if specified, is clicked.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"containerClassName","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A css class or set of classes applied to the modal container when the modal is open,\nand removed when it is closed.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"keyboard","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Close the modal when escape key is pressed</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"transition","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code>react-transition-group@2.0.0</code> <code>&#x3C;Transition/></code> component used\nto control animations for the dialog component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}},{"name":"backdropTransition","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code>react-transition-group@2.0.0</code> <code>&#x3C;Transition/></code> component used\nto control animations for the backdrop components.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}},{"name":"autoFocus","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>When <code>true</code> The modal will automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes. This also\nworks correctly with any Modal children that have the <code>autoFocus</code> prop.</p>\n<p>Generally this should never be set to <code>false</code> as it makes the Modal less\naccessible to assistive technologies, like screen readers.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"enforceFocus","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>When <code>true</code> The modal will prevent focus from leaving the Modal while open.</p>\n<p>Generally this should never be set to <code>false</code> as it makes the Modal less\naccessible to assistive technologies, like screen readers.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"restoreFocus","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>When <code>true</code> The modal will restore focus to previously focused element once\nmodal is hidden</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"restoreFocusOptions","doclets":[{"tag":"link","value":" https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Options passed to focus function when <code>restoreFocus</code> is set to <code>true</code></p>"}},"required":false,"type":{"name":"shape","value":{"preventScroll":{"name":"bool","required":false}},"raw":null}},{"name":"onEnter","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the Modal transitions in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntering","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired as the Modal begins to transition in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntered","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the Modal finishes transitioning in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExit","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired right before the Modal transitions out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExiting","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired as the Modal begins to transition out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExited","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the Modal finishes transitioning out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"manager","doclets":[],"defaultValue":{"value":"new ModalManager()","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A ModalManager instance used to track and manage the state of open\nModals. Useful when customizing how modals interact within a container</p>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"role","doclets":[],"defaultValue":{"value":"'dialog'","computed":false},"description":null,"required":false,"type":null}]},"OverlayMetadata":{"composes":null,"displayName":"Overlay","description":{"childMarkdownRemark":{"html":"<p>Built on top of <code>Popper.js</code>, the overlay component is\ngreat for custom tooltip overlays.</p>"}},"props":[{"name":"show","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Set the visibility of the Overlay</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"placement","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Specify where the overlay element is positioned in relation to the target element</p>"}},"required":false,"type":{"name":"enum","value":"PopperJS.placements","raw":null}},{"name":"target","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A DOM Element, Ref to an element, or function that returns either. The <code>target</code> element is where\nthe overlay is positioned relative to.</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"container","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A DOM Element, Ref to an element, or function that returns either. The <code>container</code> will have the Portal children\nappended to it.</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"flip","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Enables the Popper.js <code>flip</code> modifier, allowing the Overlay to\nautomatically adjust it's placement in case of overlap with the viewport or toggle.\nRefer to the <a href=\"https://popper.js.org/popper-documentation.html#modifiers..flip.enabled\">flip docs</a> for more info</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"children","doclets":[{"tag":"type","value":"{Function ({\n  show: boolean,\n  placement: Placement,\n  outOfBoundaries: ?boolean,\n  scheduleUpdate: () => void,\n  props: {\n    ref: (?HTMLElement) => void,\n    style: { [string]: string | number },\n    aria-labelledby: ?string\n  },\n  arrowProps: {\n    ref: (?HTMLElement) => void,\n    style: { [string]: string | number },\n  },\n}) => React.Element}"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A render prop that returns an element to overlay and position. See\nthe <a href=\"https://github.com/FezVrasta/react-popper#children\">react-popper documentation</a> for more info.</p>"}},"required":true,"type":{"name":"Function ({\n  show: boolean,\n  placement: Placement,\n  outOfBoundaries: ?boolean,\n  scheduleUpdate: () => void,\n  props: {\n    ref: (?HTMLElement) => void,\n    style: { [string]: string | number },\n    aria-labelledby: ?string\n  },\n  arrowProps: {\n    ref: (?HTMLElement) => void,\n    style: { [string]: string | number },\n  },\n}) => React.Element","value":null,"raw":null}},{"name":"containerPadding","doclets":[],"defaultValue":{"value":"5","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Control how much space there is between the edge of the boundary element and overlay.\nA convenience shortcut to setting <code>popperConfig.modfiers.preventOverflow.padding</code></p>"}},"required":false,"type":{"name":"number","value":null,"raw":null}},{"name":"popperConfig","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A set of popper options and props passed directly to react-popper's Popper component.</p>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"rootClose","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Specify whether the overlay should trigger <code>onHide</code> when the user clicks outside the overlay</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"rootCloseEvent","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Specify event for toggling overlay</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'mousedown'","computed":false}],"raw":null}},{"name":"rootCloseDisabled","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Specify disabled for disable RootCloseWrapper</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onHide","doclets":[{"tag":"type","value":"func"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A Callback fired by the Overlay when it wishes to be hidden.</p>\n<p><strong>required</strong> when <code>rootClose</code> is <code>true</code>.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":"function(props, ...args) {\n  let propType = PropTypes.func;\n  if (props.rootClose) {\n    propType = propType.isRequired;\n  }\n\n  return propType(props, ...args);\n}"}},{"name":"transition","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code>react-transition-group@2.0.0</code> <code>&#x3C;Transition/></code> component\nused to animate the overlay as it changes visibility.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}},{"name":"onEnter","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the Overlay transitions in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntering","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired as the Overlay begins to transition in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntered","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the Overlay finishes transitioning in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExit","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired right before the Overlay transitions out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExiting","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired as the Overlay begins to transition out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExited","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the Overlay finishes transitioning out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}}]},"DropdownMetadata":{"composes":null,"displayName":"ReactOverlaysDropdown","description":{"childMarkdownRemark":{"html":"<p><code>Dropdown</code> is set of structural components for building, accessible dropdown menus with close-on-click,\nkeyboard navigation, and correct focus handling. As with all the react-overlay's\ncomponents its BYOS (bring your own styles). Dropdown is primarily\nbuilt from three base components, you should compose to build your Dropdowns.</p>\n<ul>\n<li><code>Dropdown</code>, which wraps the menu and toggle, and handles keyboard navigation</li>\n<li><code>Dropdown.Toggle</code> generally a button that triggers the menu opening</li>\n<li><code>Dropdown.Menu</code> The overlaid, menu, positioned to the toggle with PopperJs</li>\n</ul>"}},"props":[{"name":"children","doclets":[{"tag":"type","value":"{Function ({\n  props: {\n    onKeyDown: (SyntheticEvent) => void,\n  },\n}) => React.Element}"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A render prop that returns the root dropdown element. The <code>props</code>\nargument should spread through to an element containing <em>both</em> the\nmenu and toggle in order to handle keyboard events for focus management.</p>"}},"required":true,"type":{"name":"Function ({\n  props: {\n    onKeyDown: (SyntheticEvent) => void,\n  },\n}) => React.Element","value":null,"raw":null}},{"name":"drop","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Determines the direction and location of the Menu in relation to it's Toggle.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'up'","computed":false},{"value":"'left'","computed":false},{"value":"'right'","computed":false},{"value":"'down'","computed":false}],"raw":null}},{"name":"focusFirstItemOnShow","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Controls the focus behavior for when the Dropdown is opened. Set to\n<code>true</code> to always focus the first menu item, <code>keyboard</code> to focus only when\nnavigating via the keyboard, or <code>false</code> to disable completely</p>\n<p>The Default behavior is <code>false</code> <strong>unless</strong> the Menu has a <code>role=\"menu\"</code>\nwhere it will default to <code>keyboard</code> to match the recommended <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton\">ARIA Authoring practices</a>.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"false","computed":false},{"value":"true","computed":false},{"value":"'keyboard'","computed":false}],"raw":null}},{"name":"itemSelector","doclets":[],"defaultValue":{"value":"'* > *'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A css slector string that will return <strong>focusable</strong> menu items.\nSelectors should be relative to the menu component:\ne.g. <code>> li:not('.disabled')</code></p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"alignEnd","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is <code>top-start</code> or <code>bottom-start</code>.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"show","doclets":[{"tag":"controllable","value":"onToggle"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether or not the Dropdown is visible.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onToggle","doclets":[{"tag":"controllable","value":"show"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the Dropdown wishes to change visibility. Called with the requested\n<code>show</code> value, the DOM event, and the source that fired it: <code>'click'</code>,<code>'keydown'</code>,<code>'rootClose'</code>, or <code>'select'</code>.</p>\n<pre><code class=\"language-js\">function(\n  isOpen: boolean,\n  event: SyntheticEvent,\n): void\n</code></pre>"}},"required":false,"type":{"name":"func","value":null,"raw":null}}]},"DropdownToggleMetadata":{"composes":null,"displayName":"ReactOverlaysDropdownToggle","description":null,"props":[{"name":"children","doclets":[{"tag":"type","value":"{Function ({\n  show: boolean,\n  toggle: (show: boolean) => void,\n  props: {\n    ref: (?HTMLElement) => void,\n    aria-haspopup: true\n    aria-expanded: boolean\n  },\n}) => React.Element}"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A render prop that returns a Toggle element. The <code>props</code>\nargument should spread through to <strong>a component that can accept a ref</strong>. Use\nthe <code>onToggle</code> argument to toggle the menu open or closed</p>"}},"required":true,"type":{"name":"Function ({\n  show: boolean,\n  toggle: (show: boolean) => void,\n  props: {\n    ref: (?HTMLElement) => void,\n    aria-haspopup: true\n    aria-expanded: boolean\n  },\n}) => React.Element","value":null,"raw":null}}]},"DropdownMenuMetadata":null,"PortalMetadata":{"composes":null,"displayName":"Portal","description":{"childMarkdownRemark":{"html":"<p>The <code>&#x3C;Portal/></code> component renders its children into a new \"subtree\" outside of current component hierarchy.\nYou can think of it as a declarative <code>appendChild()</code>, or jQuery's <code>$.fn.appendTo()</code>.\nThe children of <code>&#x3C;Portal/></code> component will be appended to the <code>container</code> specified.</p>"}},"props":[{"name":"container","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A DOM element, Ref to an element, or function that returns either. The <code>container</code> will have the Portal children\nappended to it.</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"onRendered","doclets":[],"defaultValue":null,"description":null,"required":false,"type":{"name":"func","value":null,"raw":null}}]},"useRootCloseDocs":{"id":"e460b7fd-570f-54fb-a117-4262c1415270","name":"useRootClose","kind":"function","description":{"childMarkdownRemark":{"html":"<p>The <code>useRootClose</code> hook registers your callback on the document\nwhen rendered. Powers the <code>&#x3C;Overlay/></code> component. This is used achieve modal\nstyle behavior where your callback is triggered when the user tries to\ninteract with the rest of the document or hits the <code>esc</code> key.</p>"}},"params":[{"id":"c26efb86-57ce-5546-9c6d-a46767344519","name":"ref","type":{"type":"UnionType","name":null,"elements":[{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Ref","typeDef___NODE":null},"applications":[{"type":"NameExpression","name":"HTMLElement","typeDef___NODE":null}]},{"type":"NameExpression","name":"HTMLElement","typeDef___NODE":null}],"params":null,"applications":null},"description":{"childMarkdownRemark":{"html":"<p>The element boundary</p>"}},"childrenDocumentationJs":[]},{"id":"17351454-a2de-59f6-a03c-e7b4cc9631fa","name":"onRootClose","type":{"type":"NameExpression","name":"function","elements":null,"params":null,"applications":null},"description":null,"childrenDocumentationJs":[]},{"id":"d2eba7f0-53c0-5030-8c2d-d3bb66111fc1","name":"options","type":{"type":"NameExpression","name":"object","elements":null,"params":null,"applications":null},"description":null,"childrenDocumentationJs":[{"id":"9e9edafc-8be9-5381-a0d3-0e63ca71510f","name":"disabled","type":{"type":"NameExpression","name":"boolean","elements":null,"params":null,"applications":null},"description":null,"childrenDocumentationJs":[]},{"id":"4dd79eb9-3ea6-5d22-a19b-9ef3e2725a36","name":"clickTrigger","type":{"type":"NameExpression","name":"string","elements":null,"params":null,"applications":null},"description":{"childMarkdownRemark":{"html":"<p>The DOM event name (click, mousedown, etc) to attach listeners on</p>"}},"childrenDocumentationJs":[]}]}],"returns":null}},"pageContext":{"isCreatedByStatefulCreatePages":true}}