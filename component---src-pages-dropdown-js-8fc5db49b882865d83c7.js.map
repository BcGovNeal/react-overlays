{"version":3,"sources":["webpack:///./src/pages/dropdown.js","webpack:///./src/examples/Dropdown.js"],"names":["DropdownPage","location","data","DropdownMetadata","DropdownMenuMetadata","DropdownToggleMetadata","className","dangerouslySetInnerHTML","__html","description","childMarkdownRemark","html","codeText","DropdownSource","component","metadata","title","pageQuery","module","exports"],"mappings":"2FACA,8HAwCeA,UAjCf,YAA2C,IAAnBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KAE9BC,EAGED,EAHFC,iBACAC,EAEEF,EAFFE,qBACAC,EACEH,EADFG,uBAGF,OACE,kBAAC,IAAD,CAAMJ,SAAUA,GACd,wBAAIK,UAAU,eACZ,kBAAC,IAAD,kBAEF,uBACEC,wBAAyB,CACvBC,OAAQL,EAAiBM,YAAYC,oBAAoBC,QAG7D,kBAAC,IAAD,CAAYC,SAAUC,MACtB,kBAAC,IAAD,CAAWC,UAAU,WAAWC,SAAUZ,IAC1C,kBAAC,IAAD,CACEa,MAAM,gBACNF,UAAU,4BACVC,SAAUX,IAEZ,kBAAC,IAAD,CACEY,MAAM,kBACNF,UAAU,8BACVC,SAAUV,MAQX,IAAMY,EAAS,c,mBC3CtBC,EAAOC,QAAU","file":"component---src-pages-dropdown-js-8fc5db49b882865d83c7.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport Anchor from '../components/Anchor';\nimport Page from '../components/Page';\nimport Playground from '../components/Playground';\nimport PropTable from '../components/PropTable';\nimport DropdownSource from '../examples/Dropdown';\n\nfunction DropdownPage({ location, data }) {\n  const {\n    DropdownMetadata,\n    DropdownMenuMetadata,\n    DropdownToggleMetadata,\n  } = data;\n\n  return (\n    <Page location={location}>\n      <h2 className=\"page-header\">\n        <Anchor>Dropdown</Anchor>\n      </h2>\n      <p\n        dangerouslySetInnerHTML={{\n          __html: DropdownMetadata.description.childMarkdownRemark.html,\n        }}\n      />\n      <Playground codeText={DropdownSource} />\n      <PropTable component=\"Dropdown\" metadata={DropdownMetadata} />\n      <PropTable\n        title=\"Dropdown.Menu\"\n        component=\"ReactOverlaysDropdownMenu\"\n        metadata={DropdownMenuMetadata}\n      />\n      <PropTable\n        title=\"Dropdown.Toggle\"\n        component=\"ReactOverlaysDropdownToggle\"\n        metadata={DropdownToggleMetadata}\n      />\n    </Page>\n  );\n}\n\nexport default DropdownPage;\n\nexport const pageQuery = graphql`\n  query DropdownQuery {\n    DropdownMetadata: componentMetadata(\n      displayName: { eq: \"ReactOverlaysDropdown\" }\n    ) {\n      ...PropTable_metadata\n    }\n    DropdownToggleMetadata: componentMetadata(\n      displayName: { eq: \"ReactOverlaysDropdownToggle\" }\n    ) {\n      ...PropTable_metadata\n    }\n    DropdownMenuMetadata: componentMetadata(\n      displayName: { eq: \"ReactOverlaysDropdownMenu\" }\n    ) {\n      ...PropTable_metadata\n    }\n  }\n`;\n","module.exports = \"const MenuContainer = styled('ButtonToolbar')`\\n  display: ${p => (p.show ? 'flex' : 'none')};\\n  min-width: 150px;\\n  position: absolute;\\n  flex-direction: column;\\n  border: 1px solid #e5e5e5;\\n  background-color: white;\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\\n  padding: 20px;\\n`;\\n\\nconst Menu = ({ role }) => {\\n  const { show, onClose, props } = useDropdownMenu({ flip: true });\\n  return (\\n    <MenuContainer {...props} role={role} show={show}>\\n      <button type=\\\"button\\\" onClick={onClose} style={{ textAlign: 'left' }}>\\n        Item 1\\n      </button>\\n      <button type=\\\"button\\\" onClick={onClose} style={{ textAlign: 'left' }}>\\n        Item 2\\n      </button>\\n    </MenuContainer>\\n  );\\n};\\n\\nconst Toggle = ({ id, children }) => {\\n  const [props, { show, toggle }] = useDropdownToggle();\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      className=\\\"btn btn-primary\\\"\\n      id={id}\\n      {...props}\\n      onClick={toggle}\\n    >\\n      {children}\\n    </button>\\n  );\\n};\\n\\nconst DropdownButton = ({ show, onToggle, drop, alignEnd, title, role }) => (\\n  <Dropdown\\n    show={show}\\n    onToggle={onToggle}\\n    drop={drop}\\n    alignEnd={alignEnd}\\n    itemSelector=\\\"button:not(:disabled)\\\"\\n  >\\n    {({ props }) => (\\n      <div {...props} className=\\\"position-relative d-inline-block\\\">\\n        <Toggle id=\\\"example-toggle\\\">{title}</Toggle>\\n        <Menu role={role} />\\n      </div>\\n    )}\\n  </Dropdown>\\n);\\n\\nconst ButtonToolbar = styled('div')`\\n  & > * + * {\\n    margin-left: 12px;\\n  }\\n`;\\n\\nfunction DropdownExample() {\\n  const [show, setShow] = useState(false);\\n\\n  return (\\n    <ButtonToolbar className=\\\"dropdown-example\\\">\\n      <DropdownButton\\n        show={show}\\n        onToggle={nextShow => setShow(nextShow)}\\n        title={`${show ? 'Close' : 'Open'} Dropdown`}\\n      />\\n      <DropdownButton alignEnd title=\\\"Align right\\\" />\\n\\n      <DropdownButton drop=\\\"up\\\" title=\\\"Drop up\\\" />\\n      <DropdownButton role=\\\"menu\\\" title=\\\"Role 'menu'\\\" />\\n    </ButtonToolbar>\\n  );\\n}\\n\\nrender(<DropdownExample />);\\n\""],"sourceRoot":""}