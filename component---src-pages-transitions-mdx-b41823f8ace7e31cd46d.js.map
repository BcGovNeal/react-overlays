{"version":3,"sources":["webpack:///./src/pages/transitions.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+QAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,6BADR,6BAGA,gEAA6C,4BAAYC,WAAW,KAAvB,cAA7C,qCACoB,4BAAYA,WAAW,KAAvB,cADpB,4BAEA,iCAAGA,WAAW,KAAQ,CAClB,KAAQ,sDADZ,gCAFA,eAKQ,4BAAYA,WAAW,KAAvB,cALR,gDAK+G,4BAAYA,WAAW,KAAvB,iBAL/G,4DAOA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,OACd,MAAQ,IAHP,k1GA4ITJ,EAAWK,gBAAiB","file":"component---src-pages-transitions-mdx-b41823f8ace7e31cd46d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jquense/src/react-overlays/www/node_modules/@docpocalypse/gatsby-theme/src/components/PageLayout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"animation-and-transitions\"\n    }}>{`Animation and Transitions`}</h1>\n    <p>{`Animation of components is handled by `}<inlineCode parentName=\"p\">{`transition`}</inlineCode>{` props. If\na component accepts a `}<inlineCode parentName=\"p\">{`transition`}</inlineCode>{` prop you can provide\na `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/reactjs/react-transition-group\"\n      }}>{`react-transition-group@2.0.0`}</a>{`\ncompatible`}<inlineCode parentName=\"p\">{`Transition`}</inlineCode>{` component and it will work.Feel free to use `}<inlineCode parentName=\"p\">{`CSSTransition`}</inlineCode>{` specifically, or roll your\nown like the below example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`import { Modal, Overlay } from 'react-overlays';\nimport Transition from 'react-transition-group/Transition';\n\nconst FADE_DURATION = 200;\n\ninjectCss(\\`\n  .fade {\n    opacity: 0;\n    transition: opacity \\${FADE_DURATION}ms linear;\n  }\n\n  .show {\n    opacity: 1;\n  }\n\n\n  .backdrop.fade.show {\n    opacity: 0.5;\n  }\n\n  .dialog {\n    position: absolute;\n    width: 400;\n    top: 50%; left: 50%;\n    transform: translate(-50%, -50%);\n    border: 1px solid #e5e5e5;\n    background-color: white;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, .5);\n    padding: 20px;\n  }\n\\`);\n\nconst fadeStyles = {\n  entering: 'show',\n  entered: 'show',\n};\n\nconst Fade = ({ children, ...props }) => (\n  <Transition {...props} timeout={FADE_DURATION}>\n    {(status, innerProps) =>\n      React.cloneElement(children, {\n        ...innerProps,\n        className: \\`fade \\${fadeStyles[status]} \\${children.props.className}\\`,\n      })\n    }\n  </Transition>\n);\n\nfunction TransitionExample() {\n  const [showModal, setShowModal] = useState(false);\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [tooltipRef, attachRef] = useState(null);\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <button\n        type=\"button\"\n        className=\"btn btn-primary mr-3\"\n        onClick={() => setShowModal((prev) => !prev)}\n      >\n        Show Animated Modal\n      </button>\n\n      <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        onClick={() => setShowTooltip((prev) => !prev)}\n        ref={attachRef}\n      >\n        Show Tooltip\n      </button>\n\n      <Overlay\n        placement=\"top\"\n        transition={Fade}\n        show={showTooltip}\n        target={tooltipRef}\n        popperConfig={{\n          modifiers: [\n            { name: 'offset', enabled: true, options: { offset: [0, 10] } },\n          ],\n        }}\n      >\n        {({ props: { ref, style } }) => (\n          <div\n            ref={ref}\n            className=\"bg-brand-200 shadow rounded z-10 px-4\"\n            style={style}\n          >\n            Hello there\n          </div>\n        )}\n      </Overlay>\n\n      <Modal\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        transition={Fade}\n        backdropTransition={Fade}\n        renderBackdrop={(props) => (\n          <div {...props} className=\"backdrop absolute inset-0 bg-black z-40\" />\n        )}\n        renderDialog={(props) => (\n          <div\n            {...props}\n            className=\"fixed inset-0 z-50 flex items-center justify-center pointer-events-none\"\n          >\n            <div className=\"dialog bg-white shadow rounded-lg pointer-events-auto\">\n              <h4 id=\"modal-label\">I&apos;m fading in!</h4>\n              <p>\n                Anim pariatur cliche reprehenderit, enim eiusmod high life\n                accusamus terry richardson ad squid. Nihil anim keffiyeh\n                helvetica, craft beer labore wes anderson cred nesciunt sapiente\n                ea proident.\n              </p>\n              <button\n                type=\"button\"\n                className=\"btn\"\n                onClick={() => setShowModal(false)}\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        )}\n      />\n    </div>\n  );\n}\n\n<TransitionExample />;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}